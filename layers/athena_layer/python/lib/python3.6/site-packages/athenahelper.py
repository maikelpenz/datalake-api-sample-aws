import boto3
from time import sleep

class AthenaHelper:

    def __init__(self, query, database, output):
        self.query = query
        self.database = database
        self.output = output
        self.session = boto3.session.Session()
        self.athena = self.session.client("athena")

    def get_results(self):
        try:
            response = self.athena.start_query_execution(
                QueryString = self.query,
                QueryExecutionContext={
                    "Database": self.database
                },
                ResultConfiguration={
                    "OutputLocation": self.output
                }
            )
        except Exception as e:
            message = "Error: {}".format(str(e))
            raise Exception(message)
        
        results = self.get_query_results(response["QueryExecutionId"])
        return results

    def get_query_results(self,exec_id):
        while(not self.is_execution_done(exec_id)):
            sleep(1)

        try:
            results = self.athena.get_query_results(
                QueryExecutionId=exec_id,
            )
        except Exception as e:
            message = "Error: {}".format(str(e))
            raise Exception(message)

        return self.format_result(results)

    def is_execution_done(self,exec_id):
        try:
            response = self.athena.get_query_execution(
                QueryExecutionId=exec_id,
            )
        except Exception as e:
            message = "Error: {}".format(str(e))
            raise Exception(message)
        
        return response["QueryExecution"]["Status"]["State"] == "SUCCEEDED"
    
    def format_result(self,results):
        columns = [
            col["Label"]
            for col in results["ResultSet"]["ResultSetMetadata"]["ColumnInfo"]
        ]

        formatted_results = []

        for result in results["ResultSet"]["Rows"][1:]:
            values = [list(field.values())[0] for field in result["Data"]]

            formatted_results.append(
                dict(zip(columns, values))
            )

        return formatted_results
